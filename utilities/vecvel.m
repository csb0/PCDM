function v = vecvel(xx,SAMPLING,TYPE)%------------------------------------------------------------%%  FUNCTION vecvel.m%  Calculation of eye velocity from position data%  Please cite: Engbert, R., & Kliegl, R. (2003) Microsaccades%  uncover the orientation of covert attention. Vision Research%  43: 1035-1045.%%  (Version 1.2, 01 JUL 05)% MODIFIED: HW 08/11/2011 -- added case 3%-------------------------------------------------------------%%  INPUT:%%  xy(1:N,1:2)     raw data, x- and y-components of the time series%  SAMPLING        sampling rate (number of samples per second)%  TYPE            velocity type: TYPE=2 recommended%%  OUTPUT:%%  v(1:N,1:2)      velocity, x- and y-components%%-------------------------------------------------------------N = length(xx);            % length of the time series%v = zeros(N,2);v = zeros(size(xx));switch TYPE    case 1        v(2:N-1,:) = SAMPLING/2*[xx(3:end,:) - xx(1:end-2,:)];    case 2        v(3:N-2,:) = SAMPLING/6*[xx(5:end,:) + xx(4:end-1,:) - xx(2:end-3,:) - xx(1:end-4,:)];        v(2,:) = SAMPLING/2*[xx(3,:) - xx(1,:)];        v(N-1,:) = SAMPLING/2*[xx(end,:) - xx(end-2,:)];    case 3                if SAMPLING == 1000            n = 10;            Xm2 = (xx(n-9:end-18,:) + xx(n-8:end-17,:) + xx(n-7:end-16,:) + xx(n-6:end-15,:)) / 4;            Xm1 = (xx(n-5:end-14,:) + xx(n-4:end-13,:) + xx(n-3:end-12,:) + xx(n-2:end-11,:)) / 4;                        Xp1 = (xx(n+5:end-4,:) + xx(n+4:end-5,:) + xx(n+3:end-6,:) + xx(n+2:end-7,:)) / 4;            Xp2 = (xx(n+9:end-0,:) + xx(n+8:end-1,:) + xx(n+7:end-2,:) + xx(n+6:end-3,:)) / 4;                        v(n:N-(n-1),:) = (SAMPLING*(Xp2+Xp1-Xm1-Xm2)) / 24;                        % recursively call the SAMPLING==500 case below, just so I don't have             % to write the huge chunk of code. Not ideal practice but isn't too bad            % in this case             v_strt = vecvel(xx(1:13,:),  500,3)*2;            v_end  = vecvel(xx(N-12:N,:),500,3)*2;            v(1:9,  :)     = v_strt(1:9,:);            v(end-8:end,:) = v_end(end-8:end,:);                    elseif SAMPLING == 500            n = 5;            Xm2 = (xx(n-4:end-8,:) + xx(n-3:end-7,:)) / 2;            Xm1 = (xx(n-2:end-6,:) + xx(n-1:end-5,:)) / 2;                        Xp1 = (xx(n+2:end-2,:) + xx(n+1:end-3,:)) / 2;            Xp2 = (xx(n+4:end-0,:) + xx(n+3:end-1,:)) / 2;                        v(n:N-(n-1),:) = (SAMPLING*(Xp2+Xp1-Xm1-Xm2)) / 12;                        v(3:4,:)     = SAMPLING/6*[xx(5:6,:) + xx(4:5,:) - xx(2:3,:) - xx(1:2,:)];            v(N-3:N-2,:) = SAMPLING/6*[xx(N-1:N,:) + xx(N-2:N-1,:) - xx(N-4:N-3,:) - xx(N-5:N-4,:)];            v(2,:)   = SAMPLING/2*[xx(3,:) - xx(1,:)];            v(N-1,:) = SAMPLING/2*[xx(end,:) - xx(end-2,:)];                        % this is the same above and might be a little easier to read, but avoiding            % recursion in Matlab is generally a good idea            %             v_strt = vecvel(xx(1:6,:), 500, 2);            %             v_end  = vecvel(xx(end-5:end,:), 500,2);            %             v(1:4) = v_strt(1:4,:);            %             v(end-3:end) = v_end(end-3:end,:);        endend