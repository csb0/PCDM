function[retval] = dataAnalysis(directory)
% dataAnalysis.m
%
%      Authors: Saghar Mirbagheri & Charlie Burlingham
%
%      Date:    09/26/2020
%
%      Purpose: Estimates trial-averaged pupil response, saccade-locked
%               impulse response function, and saccade rate.
%
%       Input:  "directory", path containing .mat files - both stimfiles and converted edf file
%
%      Outputs: "retval", struct containing pupil trial averages,
%               deconvolved saccade-locked pupil responses, and
%               saccade rate functions for each run (and separately for
%               correct and incorrect trials).
%
%     Todo:     - add a flag for each session
%               - automatically run edfToMat in directory if it hasn't been
%                 run already yet.


if ieNotDefined('directory'); directory = pwd; end

sacIrf =[];
sacRate = [];
pupilAvg = [];
baseline = [];
timeSeries = [];
plotFigs = 0;
acceptableTrialCount = 40;
lookBeforeOnset = 0;
missedTrials = [];

% make this so that it only finds and loads files that aren't HIDDEN- with
% a "." before the filename. Also it only load mat files.
s = dir(directory);
s2 = s(arrayfun(@(x) ~strcmp(x.name(1),'.'),s));
arrayStringS2  = {s2(:).name};
stimfiles = arrayStringS2(endsWith(arrayStringS2,'.mat'));
stimfileInds = contains(stimfiles,'stim');
stimfiles = stimfiles(stimfileInds);
cd(directory)

hardEasyInds = zeros(length(stimfiles),1);

% create a session flag for each run of trials. Is it the first or second session of trials?
for jj = 1:length(stimfiles)
    day{jj} = stimfiles{jj}(5:6);
end
[~,~,sessionInds] = unique(day);

for iRun = 1:length(stimfiles)
    
    % load the stimfile
    s = load(stimfiles{iRun});
    
    % get the seglen and compute trial duration
    try
        trialLength = zeros(1,length(s.task{1,1}.seglenPrecompute.seglen.vals));
        for ii = 1:length(s.task{1,1}.seglenPrecompute.seglen.vals) % for case when the timing is jittered and the ITIs are precomputed
            trialLength(ii) = sum(s.task{1,1}.seglenPrecompute.seglen.vals{ii});
        end
        retval.maxTrialLengthSec = max(trialLength);
        retval.firstSegLength = s.task{1,1}.seglenPrecompute.seglen.vals{1}(1);
    catch
        retval.maxTrialLengthSec = sum(s.task{1,1}.seglen);
        retval.firstSegLength = s.task{1,1}.seglen(1);
    end
    
    
    
    % check for number of trials
    if s.task{1}.trialnum > acceptableTrialCount
        %% loading and extracting data
        
        % load edf file
        e = getTaskEyeTraces3(stimfiles{iRun});
        edf = e.edf;
        
        tiltStim2 = e.randVars.tiltStim2; %s.stimulus.tiltStim2; % for fixedITI data instead, change to s.stimulus.tiltStim2   .   % for cue validity expt, set to "s.stimulus.tiltStim2(1:120);" % for block alt, set to e.randVars.tiltStim2(1:160)
        tiltStim2(tiltStim2==1)=2;
        tiltStim2(tiltStim2==-1)=1;
        trialCorrect = tiltStim2==e.response;
        trialIncorrect = ~trialCorrect;
        trialMiss = isnan(e.reactionTime);
        trialIncorrect(trialMiss) = 0;
  
        
        sampleRate = e.edf.samplerate;
        
        % extracting time stamps of eye tracker, trial-onset, and button
        % press
        iTkrTime = edf.gaze.time;
        trialStart = edf.mgl.time(edf.mgl.segmentNum==1);
        
        % find the index of the start of the run
        [~, startInd] = min(abs(iTkrTime-trialStart(1)));
        startInd = startInd(1);
        
        % find the last segment length
        try
            lastSegLength = s.task{1,1}.seglenPrecompute.seglen.vals{end}(end);
        catch
            lastSegLength = s.task{1,1}.seglen(end);
        end
        
        % find index of the end of the run
        [~, endInd] = min(abs(iTkrTime-(edf.mgl.time(end)+lastSegLength*1000)));
        endInd = endInd(1);
        
        % store the time indicies
        eyeTrackerTime = startInd:endInd;
        
        % extract the appropriate chunk of eye data
        pupil = edf.gaze.pupil(eyeTrackerTime)';
        
        % extract the position data
        xPos = edf.gaze.x(eyeTrackerTime)';
        yPos = edf.gaze.y(eyeTrackerTime)';
        
        % convert to degrees of visual angle
        w = s.myscreen.screenWidth;
        h = s.myscreen.screenHeight;
        xPix2Deg = s.myscreen.imageWidth/w;
        yPix2Deg = s.myscreen.imageHeight/h;
        xPos = (xPos-(w/2))*xPix2Deg;
        yPos = ((h/2)-yPos)*yPix2Deg;
        
        %% microsaccade analysis
        
        % now look for microsaccades
        eyepos = cat(2, xPos, yPos);
        
        % compute velocity
        vel = vecvel(eyepos, sampleRate, 3);
        
        % detect microsaccades
        mindur = 7;
        vthresh = 8;
        sacs = microsacc(eyepos, vel, vthresh, mindur);
        
        % Main Sequence
        magnitude = sqrt(sacs(:,6).^2 + sacs(:,7).^2);
        velocity = sacs(:,3);     
        
    
        sacs2{iRun} = sacs; % save out to fit inter-saccadic interval distribution later
        
        
        if plotFigs
            figure
            plot(velocity,magnitude,'.')
            set(gca, 'xScale', 'log', 'yScale', 'log')
            title('Main Sequence','Fontsize',18)
            xlabel('Log Magnitude','Fontsize',18)
            ylabel('Log Velocity','Fontsize',18)
            xlim([0 10^2])
            ylim([0 10^2])
            axis square
        end
        
        %%
        maxLength = max(edf.inds(:,1) - edf.inds(:,2)+1);
        edf.inds = edf.inds-startInd+1;
        keyboard
        %% deconvolve to saccades times
        
        sacTime = sacs(:,1);        % determine the indexes that saccades happened in
        downsampleRate = 5;
        
        
        if length(sacTime) > 0
            
            % downsample the pupil data
            pupilDN = downsample(pupil,downsampleRate);
            sacTimeInd = floor(sacTime/downsampleRate)+1;
            sacTimeInd = sacTimeInd(sacTimeInd>lookBeforeOnset) - lookBeforeOnset;
            
            % make a convolution matrix with width (putative IRF length) that should be determined through
            % model comparison (eventually)
            len = length(pupilDN);
            saccadeTimeVector = zeros(1, len);
            saccadeTimeVectorCorr = zeros(1, len);
            saccadeTimeVectorIncorr  = zeros(1, len);
            saccadeTimeVector(sacTimeInd) = 1;
            
            pupTrace = [];
            for trNum = 1:s.task{1}.trialnum-1
                if trialCorrect(trNum)
                    sacDuringThisTr = sacTimeInd(sacTimeInd < edf.inds(trNum,2) & sacTimeInd > edf.inds(trNum,1));
                    saccadeTimeVectorCorr(sacDuringThisTr) = 1;
                elseif trialIncorrect(trNum)
                    sacDuringThisTr = sacTimeInd(sacTimeInd < edf.inds(trNum,2) & sacTimeInd > edf.inds(trNum,1));
                    saccadeTimeVectorIncorr(sacDuringThisTr) = 1;
                end
            end
            
            retval.putativeIRFtime = 4; % Important: how long you think IRF is.
            putativeIRFlength = retval.putativeIRFtime*sampleRate/downsampleRate;
            
            
            for ii=1:putativeIRFlength
                Sacmatrix(1:len,ii) = [zeros(1,ii-1) saccadeTimeVector(1:len-ii+1)]';
                SacmatrixC(1:len,ii) = [zeros(1,ii-1) saccadeTimeVectorCorr(1:len-ii+1)]';
                SacmatrixI(1:len,ii) = [zeros(1,ii-1) saccadeTimeVectorIncorr(1:len-ii+1)]';
            end
            
            Sacmatrix = Sacmatrix(1:len,:);
            SacmatrixC = SacmatrixC(1:len,:);
            SacmatrixI = SacmatrixI(1:len,:);
            
            SacmatrixCI = [SacmatrixC, SacmatrixI];
            
            pupilSacIrf = pupilDN' * pinv(Sacmatrix');
            pupilSacIrfCI = pupilDN' * pinv(SacmatrixCI');
            sacIrf = [sacIrf; pupilSacIrf];

           
        end
        
        pupTrace = [pupTrace , pupil(1:s.task{1}.trialnum)];
        
        

        %% rate function
        
        maxLength = max(edf.inds(:,2) - edf.inds(:,1)+1);
        rateRaster = nan(s.task{1}.trialnum, maxLength);
        
        saccadeTimeVector = zeros(1, length(pupil));
        saccadeTimeVector(sacTime) = 1;
        
        for trNum = 1:s.task{1}.trialnum-2
            rateRaster(trNum,1:edf.inds(trNum,2) - edf.inds(trNum,1)+1) = saccadeTimeVector(edf.inds(trNum,1):edf.inds(trNum,2));
            sacOnTrialInds = sacTime>edf.inds(trNum,1) & sacTime<edf.inds(trNum,2);
        end

        sacRate = [sacRate ; nanmean(rateRaster(:,1:floor(maxLength/100)*100))];

  
        %%
        
        pupilAvg = [pupilAvg; nanmean(e.eye.pupil(:,1:floor(maxLength/100)*100))];

        
        baseline = [baseline; edf.gaze.baseline];
        
    
        timeSeries = [timeSeries ; pupTrace];
       
        
        
    end
    
end

retval.sacRate = sacRate;
retval.sacIrf = sacIrf;
retval.pupilAvg = pupilAvg + baseline; % add back baseline
retval.pupil = timeSeries;

retval.baseline = baseline;
retval.sampleRate = sampleRate;
retval.downsampleRate = downsampleRate;
retval.saccs = sacs2;

retval.sessionInds = sessionInds;



return;


